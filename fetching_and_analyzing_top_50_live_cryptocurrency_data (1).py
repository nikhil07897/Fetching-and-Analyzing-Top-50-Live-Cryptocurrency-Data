# -*- coding: utf-8 -*-
"""Fetching_and_Analyzing_Top_50_Live_Cryptocurrency_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRDn_2DIeoydDAGUEclydKNjkV5ph_uD
"""

!pip install requests openpyxl pandas gradio --quiet


import requests
import pandas as pd
from time import sleep
import gradio as gr
import os


def fetch_crypto_data():
    """
    Fetch live cryptocurrency data from the CoinGecko API.
    """
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 50,
        "page": 1,
        "sparkline": False
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return []


def process_data(data):
    """
    Process the fetched data and perform analysis.
    """
    if not data:
        return pd.DataFrame(), {}, {}


    df = pd.DataFrame(data)[[
        "name", "symbol", "current_price", "market_cap", "total_volume", "price_change_percentage_24h"
    ]]


    df.rename(columns={
        "name": "Cryptocurrency Name",
        "symbol": "Symbol",
        "current_price": "Current Price (USD)",
        "market_cap": "Market Cap (USD)",
        "total_volume": "24-hour Trading Volume (USD)",
        "price_change_percentage_24h": "24-hour Price Change (%)"
    }, inplace=True)


    top_5_by_market_cap = df.nlargest(5, "Market Cap (USD)")


    average_price = df["Current Price (USD)"].mean()


    max_price_change = df.loc[df["24-hour Price Change (%)"].idxmax()]
    min_price_change = df.loc[df["24-hour Price Change (%)"].idxmin()]

    return df, top_5_by_market_cap, {
        "average_price": average_price,
        "max_price_change": max_price_change,
        "min_price_change": min_price_change
    }


def save_to_excel(df, top_5_by_market_cap, analysis_results, filename="crypto_data.xlsx"):
    """
    Save the processed data and analysis results to an Excel file.
    """
    with pd.ExcelWriter(filename, engine="openpyxl") as writer:

        df.to_excel(writer, sheet_name="Top 50 Cryptocurrencies", index=False)


        top_5_by_market_cap.to_excel(writer, sheet_name="Top 5 by Market Cap", index=False)


        analysis_df = pd.DataFrame({
            "Metric": ["Average Price", "Max 24-hour Price Change", "Min 24-hour Price Change"],
            "Value": [
                f"${analysis_results['average_price']:.2f}",
                f"{analysis_results['max_price_change']['Cryptocurrency Name']} ({analysis_results['max_price_change']['24-hour Price Change (%)']:.2f}%)",
                f"{analysis_results['min_price_change']['Cryptocurrency Name']} ({analysis_results['min_price_change']['24-hour Price Change (%)']:.2f}%)"
            ]
        })
        analysis_df.to_excel(writer, sheet_name="Analysis Results", index=False)


def display_live_data():
    """
    Generator function to continuously fetch, process, and yield live cryptocurrency data.
    """
    while True:
        print("Fetching live cryptocurrency data...")
        data = fetch_crypto_data()
        if not data:
            print("No data fetched. Retrying in 5 minutes...")
            sleep(300)
            continue

        print("Processing data...")
        df, top_5_by_market_cap, analysis_results = process_data(data)

        print("Saving data to Excel...")
        save_to_excel(df, top_5_by_market_cap, analysis_results)


        yield df
        sleep(300)


def download_latest_excel():
    """
    Provide the latest Excel file for download.
    """
    if os.path.exists("crypto_data.xlsx"):
        return "crypto_data.xlsx"
    else:
        return "File not found."


def main():
    """
    Main function to create a Gradio interface for live-updating cryptocurrency data.
    """

    def update_data():
        live_data_generator = display_live_data()
        while True:
            try:
                df = next(live_data_generator)
                yield df
            except StopIteration:
                break


    def download_excel():
        return download_latest_excel()


    output_component = gr.Dataframe(label="Live Cryptocurrency Data")
    download_button = gr.Button("Download Latest Excel File")


    iface = gr.Interface(
        fn=update_data,
        inputs=None,
        outputs=output_component,
        live=True,
        title="Live Cryptocurrency Data",
        description="This interface displays live-updating cryptocurrency data fetched from CoinGecko API."
    )


    download_iface = gr.Interface(
        fn=download_excel,
        inputs=None,
        outputs=gr.File(),
        title="Download Latest Excel File",
        description="Click the button below to download the latest Excel file."
    )


    iface.launch(share=True)
    download_iface.launch(share=True)


if __name__ == "__main__":
    main()

from google.colab import drive
drive.mount('/content/drive')

import os

def save_to_excel(df, filename="crypto_data.xlsx"):

    google_drive_path = r"/content/drive/MyDrive/crypto_data (5).gsheet"
    filepath = os.path.join(google_drive_path, filename)


    df.to_excel(filepath, index=False)
    print(f"Excel file saved to {filepath}")